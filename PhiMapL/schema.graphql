type ChangeBasePlate @entity {
  id: ID!
  name: String! # string
  contractAddress: Bytes! # address
  tokenId: BigInt! # uint256
}

type ChangePhilandOwner @entity {
  id: ID!
  name: String! # string
  sender: Bytes! # address
}

type ChangeWallPaper @entity {
  id: ID!
  name: String! # string
  contractAddress: Bytes! # address
  tokenId: BigInt! # uint256
}

type CreatedMap @entity {
  id: ID!
  name: String! # string
  sender: Bytes! # address
  numberOfLand: BigInt! # uint256
}

type DepositSuccess @entity {
  id: ID!
  sender: Bytes! # address
  name: String! # string
  contractAddress: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
}

type Initialized @entity {
  id: ID!
  version: Int! # uint8
}

type MapInitialization @entity {
  id: ID!
  iname: String! # string
  sender: Bytes! # address
}

type MapLockStatusChange @entity {
  id: ID!
}

type RemoveLink @entity {
  id: ID!
  name: String! # string
  index: BigInt! # uint256
}

type RemoveObject @entity {
  id: ID!
  name: String! # string
  index: BigInt! # uint256
}

type RoleAdminChanged @entity {
  id: ID!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
}

type RoleGranted @entity {
  id: ID!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
}

type RoleRevoked @entity {
  id: ID!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
}

type Save @entity {
  id: ID!
  name: String! # string
  sender: Bytes! # address
}

type WhitelistGranted @entity {
  id: ID!
  operator: Bytes! # address
  target: Bytes! # address
}

type WhitelistRemoved @entity {
  id: ID!
  operator: Bytes! # address
  target: Bytes! # address
}

type WithdrawSuccess @entity {
  id: ID!
  sender: Bytes! # address
  name: String! # string
  contractAddress: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
}

type WriteLink @entity {
  id: ID!
  name: String! # string
  contractAddress: Bytes! # address
  tokenId: BigInt! # uint256
  title: String! # string
  url: String! # string
  data: BigInt! # uint256
}

type WriteObject @entity {
  id: ID!
  name: String! # string
  contractAddress: Bytes! # address
  tokenId: BigInt! # uint256
  xStart: BigInt! # uint256
  yStart: BigInt! # uint256
}
